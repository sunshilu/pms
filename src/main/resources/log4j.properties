
#1.导入log4j的jar包：log4j-1.2.17.jar。
#2.配置log4j.properties或log4j.xml文件到资源目录下，
#（二者同时存在时先找的是log4j.xml）
#3.在java中使用：
#生成log对象Logger log = Logger.getLogger(TestLog4j.class);
#   使用：log.debug("This is a debug msg.");
#             log.info("This is a info msg.");
#             log.warn("This is a warn msg.");
#             log.error("This is a error msg.");

log4j.rootLogger=ERROR,stdout,logfile

log4j.logger.com.situ.j1803.crawler.main=INFO

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %c : %m%n

log4j.appender.logfile.encoding=UTF-8
log4j.appender.logfile=org.apache.log4j.RollingFileAppender
log4j.appender.logfile.File=d:/logs/lms.log
log4j.appender.logfile.MaxFileSize=512KB
# Keep three backup files.
log4j.appender.logfile.MaxBackupIndex=3
# Pattern to output: date priority [category] - message
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d %p [%c,%L] - %m%n


#(1). 输出方式appender一般有5种： 
#             org.apache.log4j.RollingFileAppender(滚动文件，自动记录最新日志) 
#             org.apache.log4j.ConsoleAppender (控制台) 
#             org.apache.log4j.FileAppender (文件) 
#             org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件) 
#             org.apache.log4j.WriterAppender (将日志信息以流格式发送到任意指定的地方) 
#
#(2). 日记记录的优先级priority，优先级由高到低分为 
#            OFF ,FATAL ,ERROR ,WARN ,INFO ,DEBUG ,ALL。 
#            Log4j建议只使用FATAL ,ERROR ,WARN ,INFO ,DEBUG这五个级别。 
#
#(3). 格式说明layout中的参数都以%开始，后面不同的参数代表不同的格式化信息（参数按字母表顺序列出）： 
#                %c        输出所属类的全名，可在修改为 %d{Num} ,Num类名输出的维（如："org.apache.elathen.ClassName",%C{2}将输出elathen.ClassName） 
#                %d       输出日志时间其格式为 %d{yyyy-MM-dd HH:mm:ss,SSS}，可指定格式 如 %d{HH:mm:ss} 
#                %l        输出日志事件发生位置，包括类目名、发生线程，在代码中的行数 
#                %n       换行符 
#                %m      输出代码指定信息，如info(“message”),输出message 
#                %p       输出优先级，即 FATAL ,ERROR 等 
#                %r        输出从启动到显示该log信息所耗费的毫秒数 
#                %t        输出产生该日志事件的线程名
